pipeline {
  agent {
    kubernetes {
        yaml """\
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
        builder: promotion
    spec:
      serviceAccountName: jenkins-agent
      containers:
      - name: awscli
        image: amazon/aws-cli
        command:
        - cat
        tty: true
    """.stripIndent()
    }
  }
  stages {
    stage('Promote to Production') {
      steps {
          container(name: 'awscli') {
            script {
              buildNumber = Jenkins.instance.getItem(projectName).lastSuccessfulBuild.number
            }
            sh '''
            export AWS_DEFAULT_REGION=us-east-1
            #new img number, based on the last successful prod build
            imgNum=$(( $(aws ecr list-images --repository-name production-support-course | grep 'c374team02api-prod' | awk -F'"' '{print $4}' | sort | tail -n 1 | awk -F'-' '{print $3}') + 1 ))

            #new image tags, including their last ecr successful build number

            uat_api_tags=$(aws ecr list-images --repository-name production-support-course | grep 'c374team02api-uat' | awk -F'"' '{print $4}' | sort | tail -n 1)
            uat_currapi_tags=$(aws ecr list-images --repository-name production-support-course | grep 'c374team02currency-api-uat' | awk -F'"' '{print $4}' | sort -V | tail -n 1)
            uat_fe_tags=$(aws ecr list-images --repository-name production-support-course | grep 'c374team02fe-uat' | awk -F'"' '{print $4}' | sort | tail -n 1)
            uat_db_tags=$(aws ecr list-images --repository-name production-support-course | grep 'c374team02db-uat' | awk -F'"' '{print $4}' | sort | tail -n 1)

            
            APIMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${uat_api_tags} --query 'images[].imageManifest' --output text)
            DBMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${uat_db_tags} --query 'images[].imageManifest' --output text)
            FEMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${uat_fe_tags} --query 'images[].imageManifest' --output text)
            #now, attach the new img number to the PROD , based on last successful PROD build
            
            # Check API
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageAPIProdName}${imgNum}" | wc -l) -eq 0 ]
            then
              # tag uat to prod
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageAPIProdName}${imgNum} --image-manifest "$APIMANIFEST"
              then
                exitvalue=1
              fi
            fi
            # Check DB
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageDBProdName}${imgNum}" | wc -l) -eq 0 ]
            then
              # tag uat to prod
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageDBProdName}${imgNum} --image-manifest "$DBMANIFEST"
              then
                exitvalue="${exitvalue}2"
              fi
            fi
            
            # Check Front End
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageFEProdName}${imgNum}" | wc -l) -eq 0 ]
            then
              # tag uat to prod
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageFEProdName}${imgNum} --image-manifest "$FEMANIFEST"
              then
                exitvalue=3
              fi
            fi

            # Check SSH
            #if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageSSHProdName}${imgNum}" | wc -l) -eq 0 ]
            #then
              # We don't have prod so tag Dev to prod
              #if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageSSHProdName}${imgNum} --image-manifest "$SSHMANIFEST"
              #then
                #exitvalue=3
              #fi
            #fi

          case ${exitvalue} in
            0) echo "Update OK"
               ;;
            1) echo "API failed to push to repository"
               ;;
            2) echo "DB failed to push to repository"
               ;;
            3) echo "AC failed to push to repository"
               ;;
            12) echo "API and DB failed to push to repository"
               ;;
            13) echo "API and AC failed to push to repository"
               ;;
            23) echo "DB and AC failed to push to repository"
               ;;
            123) echo "All images failed to push to repository"
               ;;
          esac

          exit ${exitvalue}
'''
        }
      }
    }
  }
  environment {
    ECR_REPO = '108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course'
    
    imageAPIUATName='c374team02api-uat-'
    imageAPIProdName='c374team02api-prod-'
    imageDBUATName='c374team02db-uat-'
    imageDBProdName='c374team02db-prod-'
    imageFEUATName='c374team02fe-uat-'
    imageFEProdName='c374team02fe-prod-'
    projectName='c374team02'

  }
}
