pipeline {
  agent {
    kubernetes {
        yaml """\
    apiVersion: v1
    kind: Pod
    metadata:
      labels:
        builder: promotion
    spec:
      serviceAccountName: jenkins-agent
      containers:
      - name: awscli
        image: amazon/aws-cli
        command:
        - cat
        tty: true
    """.stripIndent()
    }
  }
  stages {
    stage('Promote to UAT') {
      steps {
          container(name: 'awscli') {
            script {
              buildNumber = Jenkins.instance.getItem(projectName).lastSuccessfulBuild.number
            }
            sh '''
            export AWS_DEFAULT_REGION=us-east-1
            #new img number, based on the last successful uat build
            imgNum=$(( $(aws ecr list-images --repository-name production-support-course | grep c374team02api-uat | awk -F'"' '{print $4}' |   sort -V |   tail -n 1 | awk -F'-' '{print$3}'
) +1 ))
            #new image tags, including their last ecr successful build number

            dev_api_tags=$(aws ecr list-images --repository-name production-support-course | grep c374team02api-dev |   awk -F'"' '{print $4}' |   sort -V |   tail -n 1)
            dev_currapi_tags=$(aws ecr list-images --repository-name production-support-course | grep c374team01currency-api-dev |   awk -F'"' '{print $4}' |   sort -V |   tail -n 1)
            dev_fe_tags=$(aws ecr list-images --repository-name production-support-course | grep c374team02fe-dev |   awk -F'"' '{print $4}' |   sort -V |   tail -n 1)
            dev_db_tags=$(aws ecr list-images --repository-name production-support-course | grep c374team02db-dev |   awk -F'"' '{print $4}' |   sort -V |   tail -n 1)
            
            
            APIMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${dev_api_tags} --query 'images[].imageManifest' --output text)
            DBMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${dev_db_tags} --query 'images[].imageManifest' --output text)
            FEMANIFEST=$(aws ecr batch-get-image --repository-name production-support-course --image-ids imageTag=${dev_fe_tags} --query 'images[].imageManifest' --output text)
            #now, attach the new img number to the UAT, based on last successful uat build
            
            # Check API
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageAPIUATName}${imgNum}" | wc -l) -eq 0 ]
            then
              # tag Dev to UAT
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageAPIUATName}${imgNum} --image-manifest "$APIMANIFEST"
              then
                exitvalue=1
              fi
            fi
            # Check DB
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageDBUATName}${imgNum}" | wc -l) -eq 0 ]
            then
              # tag Dev to UAT
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageDBUATName}${imgNum} --image-manifest "$DBMANIFEST"
              then
                exitvalue="${exitvalue}2"
              fi
            fi
            
            # Check Front End
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageFEUATName}${imgNum}" | wc -l) -eq 0 ]
            then
              # tag Dev to UAT
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageFEUATName}${imgNum} --image-manifest "$FEMANIFEST"
              then
                exitvalue=3
              fi
            fi

            # Check Currency API
            if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageCurrencyUATName}${imgNum}" | wc -l) -eq 0 ]
            then
              # tag Dev to UAT
              if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageCurrencyUATName}${imgNum} --image-manifest "$CURRENCYMANIFEST"
              then
                exitvalue=4
              fi
            fi

            # Check SSH
            #if [ $(aws ecr describe-images --repository-name production-support-course | grep "${imageSSHUATName}${imgNum}" | wc -l) -eq 0 ]
            #then
              # tag Dev to uat
              #if ! aws ecr put-image --repository-name production-support-course --image-tag ${imageSSHUATName}${imgNum} --image-manifest "$SSHMANIFEST"
              #then
                #exitvalue=4
              #fi
            #fi

          case ${exitvalue} in
            0) echo "Update OK"
               ;;
            1) echo "API failed to push to repository"
               ;;
            2) echo "DB failed to push to repository"
               ;;
            3) echo "AC failed to push to repository"
               ;;
            4) echo "CURRENCY API failed to push to repository"
               ;;
            12) echo "API and DB failed to push to repository"
               ;;
            13) echo "API and AC failed to push to repository"
               ;;
            23) echo "DB and AC failed to push to repository"
               ;;
            123) echo "All images failed to push to repository"
               ;;
          esac

          exit ${exitvalue}
'''
        }
      }
    }
  }
  environment {
    ECR_REPO = '108174090253.dkr.ecr.us-east-1.amazonaws.com/production-support-course'

    imageAPIUATName='c374team02api-uat-'
    imageDBUATName='c374team02db-uat-'
    imageFEUATName='c374team02fe-uat-'
    projectName='c374team02'

  }
}
